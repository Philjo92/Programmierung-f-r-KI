!pip install pandas
!pip install geopy
!pip install folium

import pandas as pd
from geopy.geocoders import Nominatim
import folium
from geopy.distance import geodesic

def get_user_input():
    city = input("Gib die Stadt ein: ")
    radius = float(input("Gib den Umkreisradius in Kilometern ein: "))
    return city, radius

def filter_addresses_by_radius(df, center_coords, radius):
    filtered_addresses = []
    for index, row in df.iterrows():
        coords = (row['Latitude'], row['Longitude'])
        if not any(pd.isna(coord) for coord in coords):
            distance = geodesic(center_coords, coords).kilometers
            if distance <= radius:
                filtered_addresses.append(row['Address'])
    return filtered_addresses

file_path = 'Datenbank.xlsx'
data = pd.read_excel(file_path)
df = data.iloc[:80].copy()

geolocator = Nominatim(user_agent="Exercises")

def get_geolocation(row):
    try:
        address = f"{row['StraÃŸe']}, {row['PLZ']}"
        location = geolocator.geocode(address)
        if location:
            return location.latitude, location.longitude, location.address
        else:
            return None, None, None
    except:
        return None, None, None

df[['Latitude', 'Longitude', 'Address']] = df.apply(get_geolocation, axis=1, result_type='expand')

# Get user input for city and radius
city, radius = get_user_input()

# Get coordinates of the specified city
city_location = geolocator.geocode(city)
if city_location:
    center_coords = (city_location.latitude, city_location.longitude)

    # Filter addresses within the specified radius
    filtered_addresses = filter_addresses_by_radius(df, center_coords, radius)

    # Display addresses in OpenStreetMap using folium
    my_map = folium.Map(location=center_coords, zoom_start=12)

    for index, row in df.iterrows():
        coords = (row['Latitude'], row['Longitude'])
        if not any(pd.isna(coord) for coord in coords):
            distance = geodesic(center_coords, coords).kilometers
            if distance <= radius:
                folium.Marker(
                    location=[row['Latitude'], row['Longitude']],
                    popup=row['Address'],
                    icon=folium.Icon(color="blue")
                ).add_to(my_map)

    # Save the map to an HTML file or display it in a Jupyter Notebook
    map_file_path = "addresses_map.html"
    my_map.save(map_file_path)
    print(f"Map saved to {map_file_path}")

    # Print the DataFrame with Geolocation information
    print("Filtered Addresses:")
    print(filtered_addresses)
else:
    print(f"Die Stadt {city} konnte nicht gefunden werden.")
